{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n/* eslint-disable no-shadow */ \"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState){\n        this.size = 4;\n        this.board = initialState || this.createEmptyBoard();\n        this.score = 0;\n        this.history = [];\n        this.scoreHistory = [];\n        this.undoCount = 2;\n        this.shuffleCount = 1;\n        this.removeCount = 0;\n        this.has256 = false;\n        this.has512 = false;\n        this.status = \"idle\";\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        this.savePreviousState();\n        let moved = false;\n        for(let i = 0; i < this.size; i++){\n            const row = this.board[i].filter((val)=>val !== 0);\n            for(let j = 0; j < row.length - 1; j++)if (row[j] === row[j + 1]) {\n                row[j] *= 2;\n                this.score += row[j];\n                row[j + 1] = 0;\n                this.checkWin(row[j]);\n                this.checkUnlocks(row[j]);\n            }\n            const newRow = row.filter((val)=>val !== 0);\n            while(newRow.length < this.size)newRow.push(0);\n            if (this.board[i].toString() !== newRow.toString()) moved = true;\n            this.board[i] = newRow;\n        }\n        if (moved) {\n            this.addRandomTile();\n            if (this.isGameOver()) this.status = \"lose\";\n        }\n    }\n    moveRight() {\n        this.board = this.reverseRows(this.board);\n        this.moveLeft();\n        if (this.status === \"win\") return;\n        this.board = this.reverseRows(this.board);\n    }\n    moveUp() {\n        this.board = this.transpose(this.board);\n        this.moveLeft();\n        if (this.status === \"win\") return;\n        this.board = this.transpose(this.board);\n    }\n    moveDown() {\n        this.board = this.transpose(this.board);\n        this.board = this.reverseRows(this.board);\n        this.moveLeft();\n        if (this.status === \"win\") return;\n        this.board = this.reverseRows(this.board);\n        this.board = this.transpose(this.board);\n    }\n    start() {\n        if (this.status !== \"playing\") {\n            this.board = this.createEmptyBoard();\n            this.addRandomTile();\n            this.addRandomTile();\n            this.score = 0;\n            this.status = \"playing\";\n            this.undoCount = 2;\n            this.shuffleCount = 1;\n            this.removeCount = 0;\n            this.has256 = false;\n            this.has512 = false;\n        }\n    }\n    restart() {\n        this.status = \"idle\";\n        this.start();\n    }\n    savePreviousState() {\n        this.history.push(this.board.map((row)=>[\n                ...row\n            ]));\n        this.scoreHistory.push(this.score);\n        if (this.history.length > 2) {\n            this.history.shift();\n            this.scoreHistory.shift();\n        }\n    }\n    undo() {\n        if (this.undoCount > 0 && this.history.length > 0) {\n            this.board = this.history.pop();\n            this.score = this.scoreHistory.pop();\n            this.undoCount--;\n        }\n    }\n    shuffle() {\n        if (this.shuffleCount === 0) return;\n        const flat = this.board.flat().filter((v)=>v !== 0);\n        for(let i = flat.length - 1; i > 0; i--){\n            const j = Math.floor(Math.random() * (i + 1));\n            [flat[i], flat[j]] = [\n                flat[j],\n                flat[i]\n            ];\n        }\n        const newBoard = this.createEmptyBoard();\n        flat.forEach((val, i)=>{\n            const row = Math.floor(i / this.size);\n            const col = i % this.size;\n            newBoard[row][col] = val;\n        });\n        this.board = newBoard;\n        this.shuffleCount--;\n    }\n    remove() {\n        if (this.removeCount === 0) return;\n        const filled = [];\n        for(let i = 0; i < this.size; i++){\n            for(let j = 0; j < this.size; j++)if (this.board[i][j] !== 0) filled.push([\n                i,\n                j\n            ]);\n        }\n        if (filled.length === 0) return;\n        const [i, j] = filled[Math.floor(Math.random() * filled.length)];\n        this.board[i][j] = 0;\n        this.removeCount--;\n    }\n    checkWin(value) {\n        if (value === 2048) this.status = \"win\";\n    }\n    checkUnlocks(value) {\n        if (value === 256 && !this.has256) {\n            this.shuffleCount++;\n            this.has256 = true;\n        }\n        if (value === 512 && this.removeCount < 2) {\n            this.removeCount++;\n            this.has512 = true;\n        }\n    }\n    createEmptyBoard() {\n        return Array.from({\n            length: this.size\n        }, ()=>Array(this.size).fill(0));\n    }\n    addRandomTile() {\n        const empty = [];\n        for(let i = 0; i < this.size; i++){\n            for(let j = 0; j < this.size; j++)if (this.board[i][j] === 0) empty.push([\n                i,\n                j\n            ]);\n        }\n        if (empty.length > 0) {\n            const [i, j] = empty[Math.floor(Math.random() * empty.length)];\n            this.board[i][j] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    isGameOver() {\n        for(let i = 0; i < this.size; i++)for(let j = 0; j < this.size; j++){\n            if (this.board[i][j] === 0) return false;\n            if (j < this.size - 1 && this.board[i][j] === this.board[i][j + 1]) return false;\n            if (i < this.size - 1 && this.board[i][j] === this.board[i + 1][j]) return false;\n        }\n        return true;\n    }\n    reverseRows(matrix) {\n        return matrix.map((row)=>[\n                ...row\n            ].reverse());\n    }\n    transpose(matrix) {\n        return matrix[0].map((_, colIndex)=>matrix.map((row)=>row[colIndex]));\n    }\n    getState() {\n        return this.board;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$boardElement = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$statusElement = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$toolsContainer = document.querySelector(\".game-tools\");\nconst $09e991522ca7e64e$var$undoButton = document.querySelector(\".undo-button\");\nconst $09e991522ca7e64e$var$shuffleButton = document.querySelector(\".shuffle-button\");\nconst $09e991522ca7e64e$var$removeButton = document.querySelector(\".remove-button\");\nfunction $09e991522ca7e64e$var$updateToolButtons() {\n    const updateSlots = (button, count, max)=>{\n        const slots = Array.from(button.querySelectorAll(\".use-slot\"));\n        slots.forEach((slot, index)=>{\n            slot.classList.toggle(\"used\", index < count);\n        });\n        button.disabled = count === 0;\n    };\n    updateSlots($09e991522ca7e64e$var$undoButton, $09e991522ca7e64e$var$game.undoCount, 2);\n    updateSlots($09e991522ca7e64e$var$shuffleButton, $09e991522ca7e64e$var$game.shuffleCount, 2);\n    updateSlots($09e991522ca7e64e$var$removeButton, $09e991522ca7e64e$var$game.removeCount, 2);\n}\nfunction $09e991522ca7e64e$var$render() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    // eslint-disable-next-line no-shadow\n    const status = $09e991522ca7e64e$var$game.getStatus();\n    const cells = $09e991522ca7e64e$var$boardElement.querySelectorAll(\".field-cell\");\n    cells.forEach((cell, index)=>{\n        const row = Math.floor(index / 4);\n        const col = index % 4;\n        const value = state[row][col];\n        cell.textContent = value === 0 ? \"\" : value;\n        cell.className = \"field-cell\";\n        if (value > 0) cell.classList.add(`field-cell--${value}`);\n    });\n    $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n    switch(status){\n        case \"win\":\n            $09e991522ca7e64e$var$statusElement.textContent = \"You win!\";\n            $09e991522ca7e64e$var$statusElement.classList.remove(\"hidden\");\n            break;\n        case \"lose\":\n            $09e991522ca7e64e$var$statusElement.textContent = \"You lose! Restart the game?\";\n            $09e991522ca7e64e$var$statusElement.classList.remove(\"hidden\");\n            break;\n        default:\n            $09e991522ca7e64e$var$statusElement.classList.add(\"hidden\");\n    }\n    $09e991522ca7e64e$var$updateToolButtons();\n}\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    const keyActions = {\n        ArrowLeft: ()=>$09e991522ca7e64e$var$game.moveLeft(),\n        ArrowRight: ()=>$09e991522ca7e64e$var$game.moveRight(),\n        ArrowUp: ()=>$09e991522ca7e64e$var$game.moveUp(),\n        ArrowDown: ()=>$09e991522ca7e64e$var$game.moveDown()\n    };\n    const action = keyActions[e.key];\n    if (action) {\n        action();\n        $09e991522ca7e64e$var$render();\n    }\n});\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    const isIdle = $09e991522ca7e64e$var$game.getStatus() === \"idle\";\n    if (isIdle) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n        $09e991522ca7e64e$var$toolsContainer.classList.remove(\"hidden\");\n    } else $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$render();\n});\n$09e991522ca7e64e$var$undoButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.undo();\n    $09e991522ca7e64e$var$render();\n});\n$09e991522ca7e64e$var$shuffleButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.shuffle();\n    $09e991522ca7e64e$var$render();\n});\n$09e991522ca7e64e$var$removeButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.remove();\n    $09e991522ca7e64e$var$render();\n});\n$09e991522ca7e64e$var$render();\n\n\n//# sourceMappingURL=index.f752c48c.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst boardElement = document.querySelector('.game-field');\nconst scoreElement = document.querySelector('.game-score');\nconst statusElement = document.querySelector('.message-lose');\nconst startButton = document.querySelector('.button.start');\nconst messageStart = document.querySelector('.message-start');\nconst toolsContainer = document.querySelector('.game-tools');\nconst undoButton = document.querySelector('.undo-button');\nconst shuffleButton = document.querySelector('.shuffle-button');\nconst removeButton = document.querySelector('.remove-button');\n\nfunction updateToolButtons() {\n  const updateSlots = (button, count, max) => {\n    const slots = Array.from(button.querySelectorAll('.use-slot'));\n\n    slots.forEach((slot, index) => {\n      slot.classList.toggle('used', index < count);\n    });\n\n    button.disabled = count === 0;\n  };\n\n  updateSlots(undoButton, game.undoCount, 2);\n  updateSlots(shuffleButton, game.shuffleCount, 2);\n  updateSlots(removeButton, game.removeCount, 2);\n}\n\nfunction render() {\n  const state = game.getState();\n  // eslint-disable-next-line no-shadow\n  const status = game.getStatus();\n  const cells = boardElement.querySelectorAll('.field-cell');\n\n  cells.forEach((cell, index) => {\n    const row = Math.floor(index / 4);\n    const col = index % 4;\n    const value = state[row][col];\n\n    cell.textContent = value === 0 ? '' : value;\n    cell.className = 'field-cell';\n\n    if (value > 0) {\n      cell.classList.add(`field-cell--${value}`);\n    }\n  });\n\n  scoreElement.textContent = game.getScore();\n\n  switch (status) {\n    case 'win':\n      statusElement.textContent = 'You win!';\n      statusElement.classList.remove('hidden');\n      break;\n    case 'lose':\n      statusElement.textContent = 'You lose! Restart the game?';\n      statusElement.classList.remove('hidden');\n      break;\n    default:\n      statusElement.classList.add('hidden');\n  }\n\n  updateToolButtons();\n}\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  const keyActions = {\n    ArrowLeft: () => game.moveLeft(),\n    ArrowRight: () => game.moveRight(),\n    ArrowUp: () => game.moveUp(),\n    ArrowDown: () => game.moveDown(),\n  };\n\n  const action = keyActions[e.key];\n\n  if (action) {\n    action();\n    render();\n  }\n});\n\nstartButton.addEventListener('click', () => {\n  const isIdle = game.getStatus() === 'idle';\n\n  if (isIdle) {\n    game.start();\n    messageStart.classList.add('hidden');\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n    toolsContainer.classList.remove('hidden');\n  } else {\n    game.restart();\n  }\n\n  render();\n});\n\nundoButton.addEventListener('click', () => {\n  game.undo();\n  render();\n});\n\nshuffleButton.addEventListener('click', () => {\n  game.shuffle();\n  render();\n});\n\nremoveButton.addEventListener('click', () => {\n  game.remove();\n  render();\n});\n\nrender();\n","/* eslint-disable no-shadow */\n'use strict';\n\nclass Game {\n  constructor(initialState) {\n    this.size = 4;\n    this.board = initialState || this.createEmptyBoard();\n    this.score = 0;\n    this.history = [];\n    this.scoreHistory = [];\n\n    this.undoCount = 2;\n    this.shuffleCount = 1;\n    this.removeCount = 0;\n\n    this.has256 = false;\n    this.has512 = false;\n\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    this.savePreviousState();\n\n    let moved = false;\n\n    for (let i = 0; i < this.size; i++) {\n      const row = this.board[i].filter((val) => val !== 0);\n\n      for (let j = 0; j < row.length - 1; j++) {\n        if (row[j] === row[j + 1]) {\n          row[j] *= 2;\n          this.score += row[j];\n          row[j + 1] = 0;\n          this.checkWin(row[j]);\n          this.checkUnlocks(row[j]);\n        }\n      }\n\n      const newRow = row.filter((val) => val !== 0);\n\n      while (newRow.length < this.size) {\n        newRow.push(0);\n      }\n\n      if (this.board[i].toString() !== newRow.toString()) {\n        moved = true;\n      }\n\n      this.board[i] = newRow;\n    }\n\n    if (moved) {\n      this.addRandomTile();\n\n      if (this.isGameOver()) {\n        this.status = 'lose';\n      }\n    }\n  }\n\n  moveRight() {\n    this.board = this.reverseRows(this.board);\n    this.moveLeft();\n\n    if (this.status === 'win') {\n      return;\n    }\n    this.board = this.reverseRows(this.board);\n  }\n\n  moveUp() {\n    this.board = this.transpose(this.board);\n    this.moveLeft();\n\n    if (this.status === 'win') {\n      return;\n    }\n    this.board = this.transpose(this.board);\n  }\n\n  moveDown() {\n    this.board = this.transpose(this.board);\n    this.board = this.reverseRows(this.board);\n    this.moveLeft();\n\n    if (this.status === 'win') {\n      return;\n    }\n    this.board = this.reverseRows(this.board);\n    this.board = this.transpose(this.board);\n  }\n\n  start() {\n    if (this.status !== 'playing') {\n      this.board = this.createEmptyBoard();\n      this.addRandomTile();\n      this.addRandomTile();\n      this.score = 0;\n      this.status = 'playing';\n      this.undoCount = 2;\n      this.shuffleCount = 1;\n      this.removeCount = 0;\n      this.has256 = false;\n      this.has512 = false;\n    }\n  }\n\n  restart() {\n    this.status = 'idle';\n    this.start();\n  }\n\n  savePreviousState() {\n    this.history.push(this.board.map((row) => [...row]));\n    this.scoreHistory.push(this.score);\n\n    if (this.history.length > 2) {\n      this.history.shift();\n      this.scoreHistory.shift();\n    }\n  }\n\n  undo() {\n    if (this.undoCount > 0 && this.history.length > 0) {\n      this.board = this.history.pop();\n      this.score = this.scoreHistory.pop();\n      this.undoCount--;\n    }\n  }\n\n  shuffle() {\n    if (this.shuffleCount === 0) {\n      return;\n    }\n\n    const flat = this.board.flat().filter((v) => v !== 0);\n\n    for (let i = flat.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [flat[i], flat[j]] = [flat[j], flat[i]];\n    }\n\n    const newBoard = this.createEmptyBoard();\n\n    flat.forEach((val, i) => {\n      const row = Math.floor(i / this.size);\n      const col = i % this.size;\n\n      newBoard[row][col] = val;\n    });\n\n    this.board = newBoard;\n    this.shuffleCount--;\n  }\n\n  remove() {\n    if (this.removeCount === 0) {\n      return;\n    }\n\n    const filled = [];\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] !== 0) {\n          filled.push([i, j]);\n        }\n      }\n    }\n\n    if (filled.length === 0) {\n      return;\n    }\n\n    const [i, j] = filled[Math.floor(Math.random() * filled.length)];\n\n    this.board[i][j] = 0;\n    this.removeCount--;\n  }\n\n  checkWin(value) {\n    if (value === 2048) {\n      this.status = 'win';\n    }\n  }\n\n  checkUnlocks(value) {\n    if (value === 256 && !this.has256) {\n      this.shuffleCount++;\n      this.has256 = true;\n    }\n\n    if (value === 512 && this.removeCount < 2) {\n      this.removeCount++;\n      this.has512 = true;\n    }\n  }\n\n  createEmptyBoard() {\n    return Array.from({ length: this.size }, () => Array(this.size).fill(0));\n  }\n\n  addRandomTile() {\n    const empty = [];\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          empty.push([i, j]);\n        }\n      }\n    }\n\n    if (empty.length > 0) {\n      const [i, j] = empty[Math.floor(Math.random() * empty.length)];\n\n      this.board[i][j] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  isGameOver() {\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          return false;\n        }\n\n        if (j < this.size - 1 && this.board[i][j] === this.board[i][j + 1]) {\n          return false;\n        }\n\n        if (i < this.size - 1 && this.board[i][j] === this.board[i + 1][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  reverseRows(matrix) {\n    return matrix.map((row) => [...row].reverse());\n  }\n\n  transpose(matrix) {\n    return matrix[0].map((_, colIndex) => matrix.map((row) => row[colIndex]));\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","size","board","createEmptyBoard","score","history","scoreHistory","undoCount","shuffleCount","removeCount","has256","has512","status","moveLeft","savePreviousState","moved","i","row","filter","val","j","length","checkWin","checkUnlocks","newRow","push","toString","addRandomTile","isGameOver","moveRight","reverseRows","moveUp","transpose","moveDown","start","restart","map","shift","undo","pop","shuffle","flat","v","Math","floor","random","newBoard","forEach","col","remove","filled","value","Array","from","fill","empty","matrix","reverse","_","colIndex","getState","getScore","getStatus","$09e991522ca7e64e$var$boardElement","document","querySelector","$09e991522ca7e64e$var$scoreElement","$09e991522ca7e64e$var$statusElement","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$toolsContainer","$09e991522ca7e64e$var$undoButton","$09e991522ca7e64e$var$shuffleButton","$09e991522ca7e64e$var$removeButton","$09e991522ca7e64e$var$render","state","cells","querySelectorAll","cell","index","textContent","className","classList","add","$09e991522ca7e64e$var$updateToolButtons","updateSlots","button","count","max","slots","slot","toggle","disabled","addEventListener","e","action","keyActions","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","key"],"version":3,"file":"index.f752c48c.js.map"}